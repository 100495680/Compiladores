(setq a 0)
(setq b 10)
(setq c 0)
(defun main ()
	(setq main_a 0)
	(setq main_b 10)
	(setq main_c 0)
	(if (or (or (= main_a 0) (= main_b 0)) (= main_c 0))
	(progn	(print "|| ||")))
	(if (or (and (= main_a 0) (= main_b 0)) (= main_c 1))
	(progn	(print "&& ||")))
	(if (and (and (= main_a 0) (= main_b 0)) (= main_c 0))
	(progn	(print "&& &&")))
	(if (or (= main_a 0) (and (= main_b 0) (= main_c 1)))
	(progn	(print "|| &&")))
	(if (or (= main_a 0) (= main_b 0))
	(progn	(print "||")))
	(if (and (= main_a 0) (= main_b 0))
	(progn	(print "&&")))
	(if (/= main_a 0)
	(progn	(print "!=")))
	(if (= main_a 0)
	(progn	(print "==")))
	(if (> main_a 0)
	(progn	(print ">")))
	(if (< main_a 0)
	(progn	(print "<")))
	(if (>= main_a 0)
	(progn	(print ">=")))
	(if (<= main_a 0)
	(progn	(print "<=")))
	(setf main_a (+ main_b main_c))
	(setf main_a (- main_b main_c))
	(setf main_a (* main_b main_c))
	(setf main_a (/ main_b main_c))
	(setf main_a (mod main_b main_c))
	(setf main_a (not main_b))
	(setf main_a 29)
	(setf main_a (- 29))
	(loop while (< main_a 5) do
	(progn	(print "while")))
	(if (mod main_a 2)
	(progn	(print "PAR"))
	(progn	(print "IMPAR")))
)
 //@ main
